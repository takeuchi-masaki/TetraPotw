export enum BlockType {
    Empty = 0,
    Z = 1,
    L = 2,
    O = 3,
    S = 4,
    I = 5,
    J = 6,
    T = 7,
};

export const rotations: number[][][][] = [
    [], // Empty
    [   // Z
        [
            [2, 2, 0],
            [0, 2, 2],
            [0, 0, 0],
        ],
        [
            [0, 0, 2],
            [0, 2, 2],
            [0, 2, 0],
        ],
        [
            [0, 0, 0],
            [2, 2, 0],
            [0, 2, 2],
        ],
        [
            [0, 2, 0],
            [2, 2, 0],
            [2, 0, 0],
        ]
    ],
    [   // L
        [
            [3, 0, 0],
            [3, 3, 3],
            [0, 0, 0]
        ],
        [
            [0, 3, 3],
            [0, 3, 0],
            [0, 3, 0],
        ],
        [
            [0, 0, 0],
            [3, 3, 3],
            [0, 0, 3],
        ],
        [
            [0, 3, 0],
            [0, 3, 0],
            [3, 3, 0],
        ]
    ],
    [   // O
        [
            [4, 4],
            [4, 4],
        ]
    ],
    [   // S
        [
            [0, 5, 5],
            [5, 5, 0],
            [0, 0, 0],
        ],
        [
            [0, 5, 0],
            [0, 5, 5],
            [0, 0, 5],
        ],
        [
            [0, 0, 0],
            [0, 5, 5],
            [5, 5, 0],
        ],
        [
            [5, 0, 0],
            [5, 5, 0],
            [0, 5, 0],
        ]
    ],
    [   // I
        [
            [0, 0, 0, 0],
            [6, 6, 6, 6],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ],
        [
            [0, 0, 6, 0],
            [0, 0, 6, 0],
            [0, 0, 6, 0],
            [0, 0, 6, 0],
        ],
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [6, 6, 6, 6],
            [0, 0, 0, 0],
        ],
        [
            [0, 6, 0, 0],
            [0, 6, 0, 0],
            [0, 6, 0, 0],
            [0, 6, 0, 0],
        ]
    ],
    [   // J
        [
            [0, 0, 7],
            [7, 7, 7],
            [0, 0, 0],
        ],
        [
            [0, 7, 0],
            [0, 7, 0],
            [0, 7, 7],
        ],
        [
            [0, 0, 0],
            [7, 7, 7],
            [7, 0, 0],
        ],
        [
            [7, 7, 0],
            [0, 7, 0],
            [0, 7, 0],
        ]
    ],
    [   // T
        [
            [0, 8, 0],
            [8, 8, 8],
            [0, 0, 0],
        ],
        [
            [0, 8, 0],
            [0, 8, 8],
            [0, 8, 0],
        ],
        [
            [0, 0, 0],
            [8, 8, 8],
            [0, 8, 0],
        ],
        [
            [0, 8, 0],
            [8, 8, 0],
            [0, 8, 0],
        ]
    ]
];

// TODO: implement SRS wall kicks

export class Block {
    public type: BlockType;
    public rotation: number;
    public x: number; // x position of top left corner
    public y: number; // y position of top left corner

    constructor(type: BlockType) {
        this.type = type;
        this.x = (this.type == BlockType.O ? 4 : 3);
        this.y = 3;
        this.rotation = 0;
    }
}
